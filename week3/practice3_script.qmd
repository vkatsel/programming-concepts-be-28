---
title: "Практична №3 - Control flow"
author: "Vadym Katsel"
affiliation: "Основи програмування"
date: "10-27-2025"
toc: true
lang: ua
format: 
  html:
    theme:
      light: cosmo
      dark: darkly
execute:
  eval: false
---

# Вступна частина

-   Мета:
    -   Перестати писати код, який виконується лише згори донизу.
    -   Навчити студентів змушувати програму "приймати рішення" (if) та "повторювати дії" (while, for), щоб вирішувати складні, інтерактивні задачі.
-   План заняття: Ми почнемо з if і напишемо калькулятор індексу маси тіла. Потім ми візьмемо цикли, напишемо гру-вгадайку та відомий "FizzBuzz". А в кінці зберемо все це до купи, щоб ви могли зробити свій перший крутий проєкт — симулятор банкомату.

# Блок 1: Прийняття Рішень (if/elif/else)

## Загальна теорія

-   if — це перевірка умови, яка завжди повертає True (правда) або False (неправда)

-   Ключові логічні оператори: ==, !=, \<, \>, \<=, \>=, and, or, not

-   Синтаксис:

```{python}
if умова_1:
    # код, який виконується, якщо умова_1 істинна
elif умова_2:
    # код, який виконується, якщо умова_2 істинна
else:
    # код, який виконується, якщо жодна з умов не істинна
```

## Live coding

::: callout-note
# Задача: Індекс маси тіла (BMI) за зростом та вагою
:::

- Крок 1: отримуємо дані

```{python}
print("--- Калькулятор ІМТ ---")
height_str = input("Введіть ваш зріст (у метрах, напр. 1.75): ")
weight_str = input("Введіть вашу вагу (у кг): ")

height = float(height_str)
weight = float(weight_str)
```

- Крок 2: розрахунки

```{python}
bmi = weight / (height ** 2)

# Використовуємо f-string форматування, щоб округлити до 2 знаків
print(f"Ваш ІМТ: {round(bmi, 2)}")
```

- Крок 3: прийняття рішень

```{python}

if bmi < 18.5:
    print("Статус: Недостатня вага.")
elif bmi >= 18.5 and bmi < 25:
    print("Статус: Нормальна вага. Вітаємо!")
elif bmi >= 25 and bmi < 30:
    print("Статус: Зайва вага.")
else: # Все, що >= 30
    print("Статус: Ожиріння.")

print("Аналіз завершено. Будьте здорові!")

```

# Блок 2: Цикли (while та for)

## Загальна теорія
- Цикл while — це як вартовий. Він стоїть і поки умова правдива (наприклад, while door_is_closed:), він щось робить. Він не знає, скільки разів він це зробить, він просто перевіряє умову.

  - Приклад з діленням:
```{python}

a = int(input("Введіть число a: "))
b = int(input("Введіть число b: "))

if (b == 0):
    print("Ділення на нуль неможливе!")
    b = int(input("Введіть ненульове число b: "))
else:
    print(f"Результат ділення: {a / b}")
    
# Це спрацює один раз, але якшо юзер знову введе 0?

while b == 0:
    print("Ділення на нуль неможливе!")
    b = int(input("Введіть ненульове число b: "))
    
print(f"Результат ділення: {a / b}")
```

  - Live coding:
  
:::callout-note
# Задача: Гра "Вгадай число"
Нам потрібно написату гру, де гравець має вгадати секретне число від 1 до 10. Програма повинна підказувати, чи є вгадане число більшим або меншим за секретне, і дозволяти гравцеві виходити з гри в будь-який момент, ввівши 'q'. Кількість спроб не обмежена.
:::
```{python}

secret_number = 7 # Наш секрет

print("--- Гра 'Вгадай число' ---")
print("Я загадав число від 1 до 10. Спробуй вгадати!")

while True: # Запускаємо вічний цикл
    guess_str = input("Ваша спроба (або 'q' для виходу): ")

    # Завжди даємо користувачу вихід
    if guess_str == 'q':
        print("Шкода, що ти здаєшся. Бувай!")
        break # ВИХІД з циклу

    guess = int(guess_str) # Конвертуємо

    # А тепер логіка з блоку IF
    if guess == secret_number:
        print(f"ТАК! Це було {secret_number}! Ти переміг!")
        break # Успішний ВИХІД з циклу
    elif guess < secret_number:
        print("Моє число більше...")
    else:
        print("Моє число менше...")

print("Гра завершена.")

```

- Цикл for
  - Якщо `while` — це вартовий, то `for` — це інспектор. Він бере список і каже: 'Я пройдуся по кожному елементу в цьому списку рівно один раз'
  - Функція `range()`: "Найчастіше ми хочемо пройтися по числах. Для цього є `range()`":

range(5) дає: 0, 1, 2, 3, 4

range(1, 6) дає: 1, 2, 3, 4, 5

range(0, 10, 2) дає: 0, 2, 4, 6, 8

  - Ключове слово `continue` (з Notion): "Це не 'гальмо', а 'пропустити'. continue каже: 'Все, з цією ітерацією закінчили, давай наступну'".
  
  - Live coding:
:::callout-note
Завдання: пройтися по числах від 1 до 100. Якщо число ділиться на 3 — друкуємо 'Fizz'. На 5 — 'Buzz'. На 3 і 5 одночасно — 'FizzBuzz'. Інакше — саме число.
:::
```{python}
for num in range(1, 101): # від 1 до 100 включно

    # Нюанс: завжди перевіряємо найскладнішу умову першою!
    if num % 3 == 0 and num % 5 == 0:
        print("FizzBuzz")
    elif num % 3 == 0:
        print("Fizz")
    elif num % 5 == 0:
        print("Buzz")
    else:
        print(num)
```

  - Приклад на continue: "А тепер виведемо всі числа, крім тих, що діляться на 5".

```{python}
for num in range(1, 21):
    if num % 5 == 0:
        continue 
    print(num)
```

# Розбір Завдання "Банкомат"

Спільний аналіз (питання-відповідь):

"Програма має працювати постійно, поки ми не виберемо 'Вихід'. Який цикл для цього ідеально підійде?" (Відповідь: while True:).

"Як ми вийдемо з цього вічного циклу?" (Відповідь: break, коли користувач введе '4').

"Всередині циклу нам треба обробити 4 різні варіанти дій. Що використаємо?" (Відповідь: драбинку if ... elif ... elif ... else).

"У варіанті 'Зняти готівку' нам спочатку треба перевірити, чи сума_до_зняття <= balance. Що це?" (Відповідь: if всередині іншого if... else!). Це називається вкладена логіка.

# Q&A та індивідуальна робота
Питання? Якщо ні — ви все знаєте. Розбийте задачу на маленькі кроки. Я тут, щоб допомогти
